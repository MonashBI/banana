from ..base import MRIStudy
from nianalysis.study.base import set_dataset_specs
from nianalysis.dataset import DatasetSpec
from nipype.interfaces.fsl.preprocess import FLIRT, ApplyXFM
from nipype.interfaces.fsl.utils import ConvertXFM
from nipype.interfaces.fsl.maths import UnaryMaths, BinaryMaths, MultiImageMaths, Threshold, SpatialFilter
from nipype.interfaces.spm.preprocess import NewSegment
 

from nianalysis.citations import (
    fsl_cite, spm_cite, matlab_cite)
from nianalysis.data_formats import (
    dicom_format, nifti_gz_format, nifti_format, text_matrix_format)
from nianalysis.requirements import (
    fsl5_req, mrtrix3_req, spm12_req, matlab2015_req)

class UTEStudy(MRIStudy):
    
#    template_path = '/home/jakubb/template/template_template0.nii.gz'
    template_path = '/Users/jakubb/Desktop/ACProject/template/template_template0.nii.gz' 
    
    def registration_pipeline(self, **options):  # @UnusedVariable @IgnorePep8
        """
        Register T1 and T2 to the 

        Parameters
        ----------
        """
        pipeline = self.create_pipeline(
            name='registration_pipeline',
            inputs=[DatasetSpec('ute_echo1', nifti_gz_format),
                    DatasetSpec('ute_echo2', nifti_gz_format)],
            outputs=[DatasetSpec('ute1_registered', nifti_gz_format),
                     DatasetSpec('ute2_registered', nifti_gz_format),
                     DatasetSpec('template_to_ute_mat', text_matrix_format),
                     DatasetSpec('ute_to_template_mat', text_matrix_format)],
            description="Register ute images to the template",
            default_options={},
            version=1,
            citations=(fsl_cite),
            options=options)
        
        # Create registration node
        registration = pipeline.create_node(
            FLIRT(), name='ute1_registration',
            requirements=[fsl5_req], wall_time=180)
        
        registration.inputs.reference = self.template_path 
        registration.inputs.output_type = 'NIFTI_GZ'
        registration.inputs.searchr_x = [-180, 180]
        registration.inputs.searchr_y = [-180, 180]
        registration.inputs.searchr_z = [-180, 180]
        registration.inputs.bins = 256
        registration.inputs.cost_func = 'corratio'
        pipeline.connect_input('ute_echo1', registration, 'in_file')
        
        # Inverse matrix conversion 
        convert_mat = pipeline.create_node(
            ConvertXFM(), name='inverse_matrix_conversion',
            requirements=[fsl5_req], wall_time=10)
        
        convert_mat.inputs.invert_xfm = True
        pipeline.connect(registration, 'out_matrix_file',  convert_mat, 'in_file')
        
        # UTE_echo_2 transformation
        transform_ute2 = pipeline.create_node(
            ApplyXFM(), name='transform_t2',
            requirements=[fsl5_req], wall_time=10)
        
        transform_ute2.inputs.output_type = 'NIFTI_GZ'
        transform_ute2.inputs.reference = self.template_path
        transform_ute2.inputs.apply_xfm = True
        pipeline.connect(registration, 'out_matrix_file',  transform_ute2, 'in_matrix_file')
        pipeline.connect_input('ute_echo2',  transform_ute2,'in_file')
        
        pipeline.connect_output('ute1_registered', registration, 'out_file')
        pipeline.connect_output('ute_to_template_mat',  registration, 'out_matrix_file')
        pipeline.connect_output('ute2_registered', transform_ute2, 'out_file')
        pipeline.connect_output('template_to_ute_mat',  convert_mat, 'out_file')

        pipeline.assert_connected()
        
        return pipeline


    def maths_operation_pipeline(self, **options):  # @UnusedVariable @IgnorePep8
        

        pipeline = self.create_pipeline(
            name='registration_pipeline',
            inputs=[DatasetSpec('ute1_registered', nifti_gz_format),
                    DatasetSpec('ute2_registered', nifti_gz_format),
                    DatasetSpec('umap_ute', nifti_gz_format),
                    DatasetSpec('template_to_ute_mat')],
            outputs=[DatasetSpec('r2_registered', nifti_gz_format)],
            description="Register ute images to the template",
            default_options={},
            version=1,
            citations=(fsl_cite),
            options=options)

    # The list of study dataset_specs that are either primary from the scanner
    # (i.e. without a specified pipeline) or generated by processing pipelines
    _dataset_specs = set_dataset_specs(
        DatasetSpec('ute_echo1', dicom_format),
        DatasetSpec('ute_echo2', dicom_format),
        DatasetSpec('umap_ute', dicom_format),
        DatasetSpec('ute1_registered', nifti_gz_format, registration_pipeline),
        DatasetSpec('ute2_registered', nifti_gz_format, registration_pipeline),
        DatasetSpec('template_to_ute_mat', text_matrix_format, registration_pipeline),
        DatasetSpec('ute_to_template_mat', text_matrix_format, registration_pipeline),
        
        inherit_from=MRIStudy.generated_dataset_specs())
