import os.path


class Scan(object):

    def __init__(self, name, format=None, pipeline=None):  # @ReservedAssignment @IgnorePep8
        """
        Parameters
        ----------
        name : str
            The name of the scan
        format : FileFormat
            The file format used to store the scan. Can be one of the
            recognised formats
        processed : bool
            Whether the scan is acquired from the scanner or processed
            (not including automatic processing done on the scanner)
        input : bool
            Whether the scan is to be used as an "input" to the dataset, i.e.
            one that is external to the ones generated by the dataset pipelines
        required_format : FileFormat
            The format that the scan is expected to be in by the dataset
            pipelines (for "input" scans only)
        """
        assert isinstance(name, basestring)
        assert isinstance(format, ScanFormat)
        self._name = name
        self._format = format
        self._pipeline = pipeline

    def __eq__(self, other):
        return (self.name == other.name and self.format == other.format and
                self.processed == other.processed and
                self._required_format == other._required_format)

    def __ne__(self, other):
        return not (self == other)

    @property
    def name(self):
        return self._name

    @property
    def format(self):
        return self._format

    @property
    def pipeline(self):
        return self._pipeline

    @property
    def processed(self):
        return self._pipeline is not None

    @property
    def filename(self, format=None):  # @ReservedAssignment
        if format is None:
            assert self.format is not None, "Scan format'{}' is undefined"
            format = self.format  # @ReservedAssignment
        return (self.name + '.' + format.extension
                if format.extension is not None else self.name)

    def match(self, filename):
        base, ext = os.path.splitext(filename)
        return base == self.name and (ext == self.format.extension or
                                      self.format is None)

    def __repr__(self):
        return ("Scan(name='{}', format={}, pipeline={})"
                .format(self.name, self.format, self.pipeline))


class ScanFormat(object):

    def __init__(self, name, extension):
        self._name = name
        self._extension = extension

    def __repr__(self):
        return "ScanFormat(name='{}', extension='{}')".format(self.name,
                                                              self.extension)

    @property
    def name(self):
        return self._name

    @property
    def extension(self):
        return self._extension


nifti_format = ScanFormat(name='nifti', extension='nii')

nifti_gz_format = ScanFormat(name='nifti_gz', extension='nii.gz')

mrtrix_format = ScanFormat(name='mrtrix', extension='mif')

analyze_format = ScanFormat(name='analyze', extension='img')

dicom_format = ScanFormat(name='dicom', extension='')

fsl_bvecs_format = ScanFormat(name='fsl_bvecs', extension='bvec')

fsl_bvals_format = ScanFormat(name='fsl_bvals', extension='bval')

mrtrix_grad_format = ScanFormat(name='mrtrix_grad', extension='b')

matlab_format = ScanFormat(name='matlab', extension='mat')
