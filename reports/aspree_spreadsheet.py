import os.path
from copy import copy

data_dir = os.path.join(os.path.dirname(__file__), '_data')


target = [
    214578, 220312, 225374, 242452, 243743, 243744, 245594, 245855, 246118,
    247112, 247436, 247551, 248026, 248215, 249479, 249571, 249741, 250531,
    250535, 250801, 250883, 251389, 251592, 251832, 252025, 252561, 253053,
    253860, 253861, 254374, 254488, 254553, 254663, 260205, 261296, 261682,
    262360, 263628, 264635, 264639, 264818, 264938, 265602, 265834, 265974,
    266105, 266114, 266508, 266604, 267481, 267508, 267619, 268976, 269009,
    269236, 269502, 269593, 269699, 269758, 269916, 269946, 270023, 270096,
    270366, 270854, 271538, 271676, 271853, 271858, 273536, 273716, 273736,
    274437, 274694, 274906, 275240, 275305, 275368, 275393, 275839, 277225,
    277296, 277476, 277515, 277612, 277644, 277653, 277656, 277674, 277793,
    277817, 277851, 279420, 279876, 279928, 283146, 283147, 283159, 283249,
    283253, 283275, 283369, 283374, 283490, 283606, 283624, 283689, 283735,
    283802, 283861, 283996, 284072, 284108, 284122, 284130, 284397, 284563,
    284566, 284685, 284697, 285575, 285611, 285622, 288391, 288674, 288676,
    288684, 288709, 288733, 288790, 288791, 288802, 288862, 288868, 288879,
    288883, 288901, 288912, 288924, 288927, 288936, 289076, 289087, 289204,
    290096, 290097, 290143, 290157, 290172, 290251, 290278, 290500, 290526,
    292384, 292626, 292896, 292963, 292965, 292982, 295186, 295187, 295252,
    295285, 295286, 295320, 295321, 295370, 295388, 295411, 295414, 295491,
    295510, 295511, 296171, 296258, 296289, 296354, 296391, 296573, 296575,
    296587, 296592, 297236, 297369, 297576, 298093, 298539, 298986, 299059,
    299078, 299099, 299105, 299223, 299309, 299321, 299343, 300478, 300645,
    300829, 300863, 300871, 300952, 300967, 301003, 301165, 302825, 302847,
    302957, 302967, 302996, 303883, 304013, 304029, 304417, 304441, 304442,
    304514, 304519, 304720, 304722, 304730, 304748, 305091, 305110, 305143,
    305193, 305265, 305302, 305323, 305439, 307238, 307242, 307247, 307398,
    307978, 308004, 309517, 310233, 310269, 310447, 310643, 310657, 311780,
    311801, 312665, 312726, 312733, 312900, 313179, 314106, 314178, 314192,
    314233, 314506, 314671, 314688, 314697, 314712, 314731, 314848, 315055,
    315174, 315193, 315818, 315825, 315865, 316189, 316231, 316299, 316329,
    316333, 316389, 316791, 317219, 317238, 317446, 317469, 317493, 317610,
    317628, 317765, 317782, 317993, 318094, 318103, 318519, 318540, 318559,
    318806, 318891, 318894, 318901, 319012, 319144, 319160, 320063, 320103,
    320187, 320205, 320927, 321086, 321144, 321196, 321796, 321822, 322217,
    324327, 324432, 324803, 324966, 324984, 324985, 325001, 325016, 325019,
    325023, 325031, 325062, 325178, 325352, 325363, 325413, 325497, 325523,
    325526, 325573, 325649, 325817, 325857, 325956, 326332, 326547, 326555,
    329020, 329028, 329045, 329093, 329094, 329100, 329208, 329254, 329263,
    330097, 330384, 330432, 330436, 330462, 330490, 330518, 330525, 330538,
    330562, 330598, 332579, 332721, 332793, 332989, 333086, 333228, 333231,
    333418, 333433, 333438, 333475, 334881, 334892, 335032, 335063, 335115,
    335235, 335564, 335617, 335656, 335658, 335685, 335744, 335753, 335966,
    340219, 340315, 340319, 340329, 340330, 340399, 340434, 340472, 340473,
    340484, 340967, 341115, 341939, 341981, 342361, 342388, 342412, 342695,
    342720, 342767, 343219, 344303, 344749, 345410, 345440, 347485, 347493,
    347574, 347591, 348011, 348056, 348065, 349022, 349034, 349100, 349212,
    349231, 349361, 349456, 349465, 349564, 350313, 350465, 351210, 351404,
    351467, 351602, 352523, 352602, 352606, 352632, 352633, 353037, 353458,
    353603, 353606, 353636, 353682, 353809, 353818, 353820, 354170, 354222,
    355530, 355661, 355945, 356628, 356743, 356770, 357460, 357465, 357743,
    357749, 357750, 357752, 357946, 357956, 358033, 358275, 358277, 358284,
    358356, 358370, 358387, 358424, 358439, 358445, 358450, 359719, 359746,
    359753, 359806, 359814, 359821, 359824, 359855, 360111, 360163, 360246,
    361354, 361571, 361614, 361617, 361639, 361768, 361773, 361838, 361923,
    361947, 361967, 362080, 362124, 362168, 362174, 362229, 362254, 362295,
    362336, 362368, 362422, 362459, 362632, 362721, 362737, 362746, 362758,
    362776, 362803, 362821, 362840, 362841, 362842, 362926, 362993, 363033,
    363039, 363045, 363065, 363090, 363106, 363147, 363198, 363227, 363262,
    363289, 363292, 363294, 363479, 363601, 364003, 364259, 364268, 365006,
    365072, 365204, 365219, 365263, 365282, 365296, 365299, 365339, 365507,
    365629, 365634, 365724, 365884, 366186, 366270, 366432, 367149, 367343,
    367511, 368185, 368201, 368205, 368241, 368254, 368299, 368874, 369004]


with open(os.path.join(data_dir, 'daris-to-aspree.txt')) as f:
    data = f.read()

daris2aspree = {}
aspree2daris = {}
for line in data.split('\r'):
    daris_id, _, aspree_id = line.split('\t')
    aspree_id = int(aspree_id)
    subj_id = int(daris_id.split('.')[3])
    daris2aspree[subj_id] = aspree_id
    aspree2daris[aspree_id] = subj_id

del daris2aspree[401]  # actually 426

assert len(daris2aspree) == len(aspree2daris), (
    "{} vs {}".format(len(daris2aspree), len(aspree2daris)))


def read_cmh(fname):
    with open(fname) as f:
        data = f.read()
    lines = data.split('\r')
    for i, line in enumerate(copy(lines)):
        if line.startswith('Case ID'):
            column_header = line.split('\t')[4:]
            lines.pop(i)
    rows = {}
    for line in lines:
        cols = line.split('\t')
        daris_id = cols[0]
        if daris_id.startswith('1008.2'):
            daris_id = int(daris_id.split('.')[3])
        elif daris_id.startswith('NEURO_'):
            daris_id = int(daris_id[6:])
        elif daris_id.startswith('NEU'):
            daris_id = int(daris_id[3:])
        else:
            raise Exception(
                "Unrecognised id '{}' on line '{}'".format(daris_id, line))
        aspree_id = cols[1]
        if aspree_id == '':
            aspree_id = None
            print "{} doesn't have an aspree id".format(daris_id)
        else:
            try:
                aspree_id = int(aspree_id)
                if daris2aspree[daris_id] != aspree_id:
                    print(
                        "Mismatching ids for {}: {} and {} using daris".format(
                            daris_id, aspree_id, daris2aspree[daris_id]))
                    aspree_id = daris2aspree[daris_id]
                    continue
            except ValueError:
                raise Exception(
                    "Unrecognised aspree id {}".format())
        assert len(column_header) == len(cols[4:]), (
            "{} v {}".format(len(column_header), len(cols[4:])))
        vals = [(int(v) if v != '' else 0) for v in cols[4:]]
        rows[aspree_id] = dict(zip(column_header, vals))
    return rows

definite = read_cmh(os.path.join(data_dir, 'definite.txt'))
possible = read_cmh(os.path.join(data_dir, 'possible.txt'))

print 'done'
